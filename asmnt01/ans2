# This program takes an array variables and stores the biggest 1 in largest
# -------------------------------------
# | Program Area:                     |
# -------------------------------------
0x1013	#  [ ] LA:     accum = (the first element in the array)
0x2012	#  [ ] STORE:  accum to Largest[0x0011] Largest == 4
0xb001	#  [ ] LA: 	   accum = 1
0x9010	#  [ ] SUB:    accum = 8 - 1 (n - 1)
0x4000	#  [ ] MVAC:   ctr = accum
0x2000	#  [ ] STORE: ctrTEMP = accum 
0x600f	#  [ ] ---LOOP: If (c < 0) Jump to **END** 
0xb000	#  [ ]	  LA:    accum = the memory location of the first element in the array	
0x3000	#  [ ]		ADDC:  accum = ctr + accum / add the ctr to the accum
0xc000	#  [ ]		LIA:   accum = the current element in the array
0x2000  #  [ ]    STORE: eleTemp = accum
0x9000	# [  ]    Sub: accum = Largest - accum
0x0000	# [  ]  	MVAC
0x0000	# [  ]  		IF (c < 0) Jump to (SETLARGEST) ----.
0x0000	# [  ]  			ELSE -> LOAD ctrTemp              |
0x0000	# [  ]  		  	      MVAC                      |
0x0000	# [  ]          	    DEC                       |
0x0000	# [  ]  		          JMP LOOP                  |
0x0000	# [  ]  		LOAD: eletemp      (SETLARGEST) <---'
0x0000	# [  ]      STORE: 	
0x0000	# [  ]  	
0x0000	# [  ]  	
0x0000	# [  ]  	
0x0000	# [  ]  	
0x0000	# [  ]  	
0x0000	# [  ]  	
0x0000	# [  ] **END**
0x0000	# [  ]
0x0000	# [  ] eleTemp
0x0000	# [  ] ctrTemp:
0x0008  # [  ] n: The number of elements
0x0000  # [  ] largest:
0x0004  # [  ] array[0]
0x0008  # [  ] array[1]
0x0010  # [  ] array[2]
0x0040  # [  ] array[3]
0xFFFD  # [  ] array[4]
0x0009  # [  ] array[5]
0xFEDC  # [  ] array[6]
0x0004  # [  ] array[7]
# -------------------------------------
# | Temporary variables               |
# -------------------------------------
# -------------------------------------
# | Array Area: 											|
# -------------------------------------
